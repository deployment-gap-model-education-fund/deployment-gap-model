---
name: update-data

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"              # used for production releases
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * 0

jobs:
  archive:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # This will checkout the main branch on "schedule" and the specified branch on "workflow_dispatch"
        # The archiver should probably be pulled out into its own repo so archive code and data don't diverge

      - name: Who owns the workspace?
        run: ls -ld $GITHUB_WORKSPACE

      - uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.DGM_GITHUB_ACTION_CREDENTIALS }}"

      - name: Display env variables
        run: |
          echo "Workspace directory: $GITHUB_WORKSPACE" \
          echo "Google credentials path: $GOOGLE_GHA_CREDS_PATH" \

      # Give the dbcp user ownership of the workspace
      # So it can read and write files to the workspace
      - name: Give the dbcp user ownership of the workspace
        run: sudo chown -R 1000:1000 $GITHUB_WORKSPACE

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and run Docker Compose services
        run: |
          docker-compose up -d

      - name: Run the archive
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        run: |
          make archive_all

      # The google-github-actions/auth step is run as runner:docker,
      # so we need to give the workspace back to runner:docker
      - name: Give ownership of the workspace back to root
        if: always()
        run: sudo chown -R runner:docker $GITHUB_WORKSPACE

      - name: Who owns the workspace?
        if: always()
        run: ls -ld $GITHUB_WORKSPACE

  matrix_prep:
    needs: archive # Ensure archive job finishes first
    # Only run if the archive job is successful or is skipped
    # I had to add always() because the matrix_pre job wouldn't run if the archive job was skipped
    # I think this happens because archive is skipped on push, but matrix_prep is not
    if: ${{ always() && (needs.archive.result == 'success' || needs.archive.result == 'skipped') }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check if this is a scheduled run
        id: is_schedule
        run: echo "::set-output name=scheduled::${{ github.event_name == 'schedule' }}"

      - name: Fetch latest prod tag (only on schedule)
        id: latest_tag
        if: steps.is_schedule.outputs.scheduled == 'true'
        run: |
          # Install gh CLI
          sudo apt-get update && sudo apt-get install -y gh

          # Authenticate gh with token (use a PAT or GITHUB_TOKEN)
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          # Get latest tag matching pattern (e.g. v*.*.*)
          LATEST_TAG=$(gh release list --limit 1 --exclude-drafts --exclude-prereleases --pattern 'v*.*.*' --json tagName --jq '.[0].tagName')

          echo "Latest tag: $LATEST_TAG"
          echo "::set-output name=tag::$LATEST_TAG"

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Get the branch or tag that triggered the push event
            BRANCH_OR_TAG="${{ github.ref_name }}"

            # If it looks like a version tag starting with 'v', mark as prod
            if [[ "$BRANCH_OR_TAG" == v* ]]; then
              TARGET="prod"
            else
              # Otherwise treat as dev (branch like main)
              TARGET="dev"
            fi

            # Set the matrix with target and the actual git ref
            echo "matrix={\"include\":[{\"target\":\"$TARGET\",\"ref\":\"$BRANCH_OR_TAG\"}]}" >> $GITHUB_OUTPUT

          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            # On schedule, get the latest prod tag from previous step output
            LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"

            # Run matrix with dev (main branch) and prod (latest tag)
            echo "matrix={\"include\":[{\"target\":\"dev\",\"ref\":\"main\"},{\"target\":\"prod\",\"ref\":\"$LATEST_TAG\"}]}" >> $GITHUB_OUTPUT

          else
            # For manual or other events, default to dev (main branch)
            echo "matrix={\"include\":[{\"target\":\"dev\",\"ref\":\"main\"}]}" >> $GITHUB_OUTPUT
          fi

      - name: Echo matrix
        run: echo "${{ steps.set-matrix.outputs.matrix }}"

  etl:
    needs: matrix_prep # Ensure archive job finishes first
    runs-on: ubuntu-latest
    if: ${{ always() && needs.matrix_prep.result == 'success' }}
    strategy:
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.matrix) }}
      fail-fast: false
    env:
      GEOCODIO_API_KEY: ${{ secrets.GEOCODIO_API_KEY }}
      API_KEY_GOOGLE_MAPS: ${{ secrets.API_KEY_GOOGLE_MAPS }}
      GITHUB_REF: ${{ github.ref_name }} # This is changed to dev if running on a schedule
    steps:
      - name: Print matrix info
        run: |
          echo "Target: ${{ matrix.target }}"
          echo "Ref: ${{ matrix.ref }}"

      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4
        with:
          # Checkout the ref (branch or tag) from matrix
          ref: ${{ matrix.ref }}

      - name: Who owns the workspace?
        run: ls -ld $GITHUB_WORKSPACE

      - uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.DGM_GITHUB_ACTION_CREDENTIALS }}"

      - name: Display env variables
        run: |
          echo "Workspace directory: $GITHUB_WORKSPACE" \
          echo "Google credentials path: $GOOGLE_GHA_CREDS_PATH" \

      # Give the dbcp user ownership of the workspace
      # So it can read and write files to the workspace
      - name: Give the dbcp user ownership of the workspace
        run: sudo chown -R 1000:1000 $GITHUB_WORKSPACE

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and run Docker Compose services
        run: |
          docker-compose up -d

      - name: Run full ETL
        if: ${{ success() }}
        run: |
          make all

      - name: Run all test
        if: ${{ success() }}
        run: |
          make test

      - name: Write settings.yaml
        id: write_settings
        if: ${{ success() }}
        run: |
          make save_settings

      # give permission to root
      - name: Give ownership of the workspace back to root
        run: sudo chown -R runner:docker $GITHUB_WORKSPACE

      # commit the settings file
      - uses: EndBug/add-and-commit@v9
        id: commit_settings_file
        if: steps.write_settings.outcome == 'success'
        with:
          add: "src/dbcp/settings.yaml"
          author_name: "DBCP Bot"
          author_email: "bennett.norman@catalyst.coop"
          message: "Update settings.yaml"
          push: true

      # Give the dbcp user ownership of the workspace
      # So it can read and write files to the workspace
      - name: Give the dbcp user ownership of the workspace
        run: sudo chown -R 1000:1000 $GITHUB_WORKSPACE

      # Publish the outputs, grab the git SHA of the commit step
      - name: Publish publish outputs
        run: |
          # Use the commit_settings_file hash if settings.yaml was updated
          # If it wasn't updated, that means there were no changes, so use the
          # commit hash from the checkout step
          SETTINGS_FILE_SHA="${{ steps.commit_settings_file.outputs.commit_long_sha }}"
          if [ -z "$SETTINGS_FILE_SHA" ]; then
            SETTINGS_FILE_SHA="${{ steps.checkout.outputs.commit }}"
          fi

          # Run the publish-outputs command inside the Docker container
          # Pass:
          # - build-ref (the git ref, e.g. a tag or branch) for versioning
          # - code-git-sha (commit hash of the code used for build)
          # - settings-file-git-sha (commit hash of the saved settings.yaml)
          # - github-action-run-id (for tracking the GitHub Action run)
          # - target (indicates if this is 'dev' or 'prod' environment target)
          docker compose run --rm app python dbcp/cli.py publish-outputs \
            -bq \
            --build-ref ${{ matrix.ref }} \
            --code-git-sha ${{ steps.checkout.outputs.commit }} \
            --settings-file-git-sha $SETTINGS_FILE_SHA \
            --github-action-run-id ${{ github.run_id }} \
            --target ${{ matrix.target }}

      - name: Stop Docker Compose services
        if: always()
        run: |
          docker-compose down

      # The google-github-actions/auth step is run as runner:docker,
      # so we need to give the workspace back to runner:docker
      - name: Give ownership of the workspace back to root
        if: always()
        run: sudo chown -R runner:docker $GITHUB_WORKSPACE

      - name: Who owns the workspace?
        if: always()
        run: ls -ld $GITHUB_WORKSPACE
